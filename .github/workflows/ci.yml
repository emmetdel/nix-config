name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Check Nix flake and formatting
  check:
    name: Check Nix Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Check flake
        run: nix flake check --all-systems

      - name: Check formatting
        run: |
          nix develop --command nixpkgs-fmt --check .
          if [ $? -ne 0 ]; then
            echo "‚ùå Nix files are not properly formatted"
            echo "Run 'nix develop --command nixpkgs-fmt .' to fix formatting"
            exit 1
          fi

  # Pre-commit hooks
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Run pre-commit hooks
        run: |
          nix develop --command pre-commit run --all-files

  # Build NixOS configurations
  build-nixos:
    name: Build NixOS Configurations
    runs-on: ubuntu-latest
    needs: [check]
    strategy:
      matrix:
        host: [apollo, theia]
        include:
          - host: apollo
            system: x86_64-linux
          - host: theia
            system: x86_64-linux
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build NixOS configuration
        run: |
          nix build .#nixosConfigurations.${{ matrix.host }}.config.system.build.toplevel \
            --system ${{ matrix.system }} \
            --show-trace

  # Build Darwin configurations
  build-darwin:
    name: Build Darwin Configurations
    runs-on: macos-latest
    needs: [check]
    strategy:
      matrix:
        host: [macbook-pro, macbook-air]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build Darwin configuration
        run: |
          nix build .#darwinConfigurations.${{ matrix.host }}.system \
            --show-trace

  # Build Home Manager configurations
  build-home-manager:
    name: Build Home Manager Configurations
    runs-on: ubuntu-latest
    needs: [check]
    strategy:
      matrix:
        user: [apollo]
        system: [x86_64-linux]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}

      - name: Setup Cachix
        uses: cachix/cachix-action@v12
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Build Home Manager configuration
        run: |
          nix build .#homeConfigurations.${{ matrix.user }}.activationPackage \
            --system ${{ matrix.system }} \
            --show-trace

  # Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-nixos, build-home-manager, pre-commit, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    # TODO: Create staging environment in GitHub repository settings
    # environment:
    #   name: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy with deploy-rs
        run: |
          nix run .#deploy -- --targets .#staging --ssh-opts="-o StrictHostKeyChecking=no"

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-nixos, build-home-manager, pre-commit, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    # TODO: Create production environment in GitHub repository settings
    # environment:
    #   name: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          extra_nix_config: |
            experimental-features = nix-command flakes

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Deploy with deploy-rs
        run: |
          nix run .#deploy -- --targets .#production --ssh-opts="-o StrictHostKeyChecking=no"

  # Notify on completion
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        if: env.SLACK_WEBHOOK_URL != ''
        with:
          status: ${{ job.status }}
          channel: '#deployments'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}